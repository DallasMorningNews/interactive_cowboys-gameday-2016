{"version":3,"sources":["+custom.js"],"names":["$","document","ready","validateScore","score1","score2","isNaN","alert","length","response","week","currentWeek","cowscore","oppscore","comment","post","console","log","initializeDataDraw","fail","addClass","removeClass","updateResponse","cowboysScore","opponentScore","text","weeks","index","sharePicks","uriLink","leadText","click","FB","ui","method","name","link","storyURL","caption","picture","storyIMG","description","window","open","customReadouts","data","winningTeam","winningPct","winningPts","total","totalCows","totalOpps","cowPoints","oppPoints","each","key","value","Math","round","stagingData","chartData","counts","highestCount","html","getJSON","done","cleanScores","push","formatData","forEach","entry","tempArray","_","countBy","sorted","sortBy","reverse","forOwn","result","split","parseInt","drawChart","margin","top","right","bottom","left","width","height","halfpoint","maxX","d3","max","d","maxY","maxValue","x","scaleLinear","range","domain","y","xAxis","axisBottom","ticks","tickSize","yAxis","axisLeft","svg","select","append","attr","call","r","selectAll","enter","thisCount","toLowerCase","on","xCoord","mouse","this","yCoord","positionToolTip","classed","rad","parentElement","appendChild","tooltipWidth","style","position","Date","year","getFullYear","targetWeek","slice","val","chartWidth","css"],"mappings":"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","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar d = new Date();\n\tvar year = d.getFullYear();\n\n\t$('.copyright').text(year);\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// GLOBAL VARIABLE SETUP ////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t// cowboys opponents\n\tvar weeks = [\n\t  \"Giants\",\n\t  \"Redskins\",\n\t  \"Bears\",\n\t  \"49ers\",\n\t  \"Bengals\",\n\t  \"Packers\",\n\t  \"Bye\",\n\t  \"Eagles\",\n\t  \"Browns\",\n\t  \"Steelers\",\n\t  \"Ravens\",\n\t  \"Redskins\",\n\t  \"Vikings\",\n\t  \"Giants\",\n\t  \"Buccaneers\",\n\t  \"Lions\",\n\t  \"Eagles\",\n\t  \"Wilcard opponent\", // insert bye if no wildcard round\n\t  \"Divisional opponent\",\n\t  \"Conference opponent\",\n\t  \"Super Bowl opponent\"\n  \t];\n\n\t// integer equal to current week of the season\n\tvar targetWeek = $(\"#seasonWeek\").text().slice(-2);\n\tvar currentWeek, index;\n\n\n\t// checking to make sure targetWeek is a number. There are some cases in the playoffs\n\t// where this variable will not be a number. In that case, we're going to do some\n\t// sniffing to figure out which week we are in based on the playoff round.\n\n\t// first, check to see if targetWeek is a number. if so, make it an integer\n\tif (isNaN(targetWeek) !== true) {\n\t\tcurrentWeek = parseInt(targetWeek);\n\t} else {\n\t\t// if it's not a number, assign a number to current week based on the text in #seasonWeek\n\t\ttargetWeek = $(\"#seasonWeek\").text();\n\t\tif (targetWeek === \"Wildcard\") {\n\t\t\tcurrentWeek = 18;\n\t\t} else if (targetWeek === \"Divisional Round\") {\n\t\t\tcurrentWeek = 19;\n\t\t} else if (targetWeek === \"Conference Championship\") {\n\t\t\tcurrentWeek = 20;\n\t\t} else if (targetWeek === \"Super Bowl\") {\n\t\t\tcurrentWeek = 21;\n\t\t}\n\t}\n\n\t// setting an index variable that corresponds to the opponent in the opponents array\n\t// since our index is 0-based, and NFL weeks are not, we subtract 1 from the current week\n\tindex = currentWeek - 1;\n\n\n\t// ***** CHARTING VARIABLES *****\n\n\t// data object to hold parsed data\n\tvar stagingData = [];\n\n\t// data that d3 uses after we format the stagingData to get it ready right\n\tvar chartData = [];\n\n\t// placeholder for counted occurrances\n\tvar counts;\n\n\t// placeholder to hold the score with the most number of instances\n\tvar highestCount;\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// CUSTOM LABELING //////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t// labeling the cowboys opponent input field for the score projection box\n\t$(\"#opponent\").text(weeks[index]);\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// HARVESTING USER INPUT ////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t// placeholder variables that will hold the score submitted by the user\n\tvar cowboysScore, opponentScore;\n\n\t$(\"#submit\").click(function() {\n\n\t\t// grabbinbg the scores in the input fields\n\t\tcowboysScore = $(\"#cowScore\").val();\n\t\topponentScore = $(\"#oppScore\").val();\n\n\t\t// we've got some work to do now that we have new data submitted\n\t\t// first, we'll validate that what we got back is a valid score (i.e. numbers)\n\t\tvalidateScore(cowboysScore, opponentScore);\n\n\t\t// then we're going to update the response the user gets back after valid scores are submitted\n\t\tupdateResponse(cowboysScore, opponentScore);\n\n\t\t// then we're going to create custom facebook and twitter sharing functions\n\t\t// based off the score they submitted\n\t\tsharePicks(cowboysScore, opponentScore);\n\n\t});\n\n\t/* VALIDATING SCORES */\n\n\tfunction validateScore(score1, score2) {\n\n\t\t// check to make sure both scores are actual numbers\n\t\tif (isNaN(score1) === true || isNaN(score2) === true) {\n\t\t\talert(\"Please enter a valid score for both teams\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// check that a score was entered for both teams\n\t\tif (score1.length === 0 || score2.length === 0) {\n\t\t\talert(\"Please enter a score for both teams\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// once we know we have valid scores, we're going to create the object that\n\t\t// will be passed back to the database. The week of the game was created above\n\t\t// based off the label in the html document. Scores for the cowboys and their\n\t\t// opponent is gathered from the input fields. Comment is a hold over from\n\t\t// some optional data collection that we're not currently doing.\n\t\tvar response = {\n\t\t\t\"week\": currentWeek,\n\t\t\t\"cowscore\": score1,\n\t\t\t\"oppscore\": score2,\n\t\t\t\"comment\": \"No comment\"\n\t\t};\n\n\t\t// send the response object to the database. if succssful, initialize the data draw\n\t\t// pulling the new set of data down from the database and handing it off to chart drawing functions\n\t\t$.post(\"http://apps.dallasnews.com/livewire/cowboys-picks-2016\", response, function() {\n\t\t\tconsole.log(\"Success!\");\n\t\t\tinitializeDataDraw();\n\t\t}).fail(function() {\n\t\t\tconsole.log(\"Whoops, something bad happened!\");\n\t\t});\n\n\t\t// once we know we have valid scores and they've been sent off the database\n\t\t// we want to hide the submission form and show the response with the\n\t\t// custom facebook and twitter sharing options\n\t\t$(\"#userForm\").addClass(\"noShow\");\n\t\t$(\"#response\").removeClass(\"noShow\");\n\n\t}\n\n\t/* UPDATING THE RESPONSE SCORES */\n\n\t// this updates the custom text generated after a user submits a prediction\n\t// based on who they think will win and the scores\n\tfunction updateResponse(cowboysScore, opponentScore) {\n\n\t\tif (cowboysScore > opponentScore) {\n\n\t\t\t// predicted cowboys win\n\t\t\t$(\".userScore\").text(cowboysScore + \"-\" + opponentScore);\n\t\t\t$(\".userTeam\").text(\"Cowboys\");\n\n\t\t} else if (opponentScore > cowboysScore) {\n\n\t\t\t// predicted opponent win\n\t\t\t$(\".userScore\").text(opponentScore + \"-\" + cowboysScore);\n\t\t\t$(\".userTeam\").text(weeks[index]);\n\n\t\t} else if (cowboysScore === opponentScore) {\n\n\t\t\t// predicted tie (ugh)\n\t\t\t$(\".userScore\").text(cowboysScore + \"-\" + opponentScore);\n\t\t\t$(\".userResult\").text(\"tie the \" + weeks[index]);\n\n\t\t}\n\t}\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// SHARING PICK /////////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction sharePicks(cowboysScore, opponentScore) {\n\n\t\t\t// generating a custom uriLink based off the week in the season (gathered above)\n\t\t\tvar uriLink = \"http%3A%2F%2Finteractives.dallasnews.com%2F2016%2Fcowboys-gameday/week\" + currentWeek + \".html\";\n\n\t\t\t//generating custom share text based on the week and scores\n\t\t\tvar leadText = \"My week \" + currentWeek + \" Cowboys prediction: Cowboys \" + cowboysScore + \", \" + weeks[index] + \" \" + opponentScore + \". Make your pick now.\";\n\n\t\t\t// facebook sharing function\n\t\t\t$(\"#faceShare\").click(function () {\n\t\t\t\t//Facebook share\n\t\t\t\tFB.ui({\n\t\t\t\t\tmethod: 'feed',\n\t\t\t\t\tname: \"Cowboys Gameday: You make the call\",\n\t\t\t\t\tlink: storyURL,\n\t\t\t\t\tcaption: '',\n\t\t\t\t\tpicture: storyIMG,\n\t\t\t\t\tdescription: leadText\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// twitter sharing function\n\t\t\t$(\"#twitterShare\").click(function () {\n\t\t\t\twindow.open(\"https://www.twitter.com/intent/tweet?&hashtags=\" + \"&text=\" + leadText + \"&via=dallasnews&url=\" + uriLink + \"&image=\" + storyIMG, \"top=200, left=200,width=550,height=420\");\n\t\t\t});\n\n\t\t}\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// CREATE CUSTOM READOUTS ///////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t// this calculates and updates the reader submission stats (team predicted\n\t// to win the most and by an average of how much)\n\n\tfunction customReadouts(data) {\n\n\t\t// some starting variable: total data length, total times cowboys and\n\t\t// opponent is predicted to win, total cumulative margin of victory\n\t\tvar total = data.length;\n\t\tvar totalCows = 0;\n\t\tvar totalOpps = 0;\n\t\tvar cowPoints = 0;\n\t\tvar oppPoints = 0;\n\t\tvar winningTeam, winningPct, winningPts;\n\n\t\t// here we're going through the data. for each entry, we want to determine\n\t\t// a winner and by how many points they are predicted to win, and then\n\t\t// update the variable set above (totals and points)\n\t\t$.each(data, function(key, value) {\n\t\t\tif (value.cowscore > value.oppscore) {\n\t\t\t\ttotalCows++;\n\t\t\t\tcowPoints += value.cowscore - value.oppscore;\n\t\t\t} else if (value.oppscore > value.cowscore) {\n\t\t\t\ttotalOpps++;\n\t\t\t\toppPoints += value.oppscore - value.cowscore;\n\t\t\t}\n\t\t});\n\n\t\t// based on the total times they've been picked, either set the winningTeam\n\t\t// variable to \"Cowboys\" or their opponent\n\t\twinningTeam = totalCows >= totalOpps ? \"Cowboys\" : weeks[index];\n\n\t\t// figure out the percentage of submissions have that team winning\n\t\twinningPct = winningTeam === \"Cowboys\" ? totalCows / total * 100 : totalOpps / total * 100;\n\t\twinningPct = Math.round(winningPct * 10) / 10;\n\n\t\t// figure out the average margin of victory that team is predicted to win by\n\t\twinningPts = winningTeam === \"Cowboys\" ? Math.round(cowPoints / totalCows * 10) / 10 : Math.round(oppPoints / totalOpps * 10) / 10;\n\n\n\t\t// update those totals within the html output\n\t\t$(\".predictPercentage\").text(winningPct + \"%\");\n\t\t$(\".predictTeam\").text(winningTeam);\n\t\t$(\".predictPoints\").text(winningPts);\n\n\t}\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// GETTING USER RESPONSES FROM DATABASE /////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction initializeDataDraw() {\n\n\t\t// clearing our data variable set earlier. we're clearing these here because\n\t\t// the chart gets updated after a submission\n\t\tstagingData = [];\n\t\tchartData = [];\n\t\tcounts = \"\";\n\t\thighestCount = \"\";\n\n\t\t// clear the chart div to prepare for redraw.\n\t\t$(\"#chart\").html(\"\");\n\n\t\t// go get the data based on the current week in the season we are currently viewing\n\t\t$.getJSON(\"http://apps.dallasnews.com/livewire/cowboys-picks-2016/get/\" + currentWeek).done(function(data) {\n\n\t\t\t// we've got a little bit of initial cleanup to do on the data. after that's done\n\t\t\t// we're going to put the clean data in cleanScores.\n\t\t\tvar cleanScores = [];\n\n\t\t\t// we're going to weed out any score that is more than 60, because the frequency with which nfl teams\n\t\t\t// score that much is non-existent. This is mainly clearning out misbehaving score submitters\n\n\t\t\t$.each(data, function(key,value) {\n\t\t\t\tif (value.cowscore < 60 && value.oppscore < 60) {\n\t\t\t\t\tcleanScores.push(value);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// once we've got our clean data, we're going to format the data and\n\t\t\t// generate the customReadouts\n\t\t\tformatData(cleanScores);\n\t\t\tcustomReadouts(cleanScores);\n\t\t});\n\t}\n\n\t// get our initial set of data when the page is loaded\n\tinitializeDataDraw();\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// FORMATTING USER RESPONSES ////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction formatData(data) {\n\n\t\t//parse the sample data into the data object D3 expects\n\t\tdata.forEach(function(entry) {\n\t\t  var tempArray = [];\n\t\t  tempArray.push(entry.cowscore);\n\t\t  tempArray.push(entry.oppscore);\n\t\t  stagingData.push(tempArray);\n\t\t});\n\n\t\t//Create object with counted occurences\n\t\tcounts = _.countBy(stagingData);\n\n\t\t//Sort that object's counts and reverse to get highest at 0\n\t\tvar sorted = _.sortBy(counts).reverse();\n\n\t\t//The highest count\n\t\thighestCount = sorted[0];\n\n\t\t//Avoid duplicate entries by looping through counts instead\n\t\t//of originalData. Go through each count and get the values from the keys\n\t\t_.forOwn(counts, function(value, key) {\n\t\t  var result = key.split(\",\");\n\t\t  var tempArray = [];\n\t\t  tempArray.push(parseInt(result[0]));\n\t\t  tempArray.push(parseInt(result[1]));\n\t\t  chartData.push(tempArray);\n\t\t});\n\n\t\t// hand the formatted data off to the chart drawing function\n\t\tdrawChart(chartData);\n\t}\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// DRAWING THE SCATTERPLOT //////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction drawChart(data) {\n\t\t//--------Start D3 Initialization--------\n\n\t\t//Dimensions\n\t\tvar margin = {\n\t\t  top: 10,\n\t\t  right: 10,\n\t\t  bottom: 50,\n\t\t  left: 50\n\t\t};\n\t\tvar width = $(\"#chart\").width() - margin.left - margin.right;\n\t\tvar height = $(\"#chart\").width() - margin.top - margin.bottom;\n\n\t\tvar halfpoint = (width - margin.left - margin.right) / 2;\n\n\t\t//Get and set maxValue\n\t\tvar maxX = d3.max(data, function(d) {\n\t\t  return d[0];\n\t  \t});\n\n\t\tvar maxY = d3.max(data, function(d) {\n\t\t  return d[1];\n\t  \t});\n\n\t\tvar maxValue = 0;\n\n\t\tif (maxX > maxY) {\n\t\t  maxValue = maxX;\n\t\t} else {\n\t\t  maxValue = maxY;\n\t\t}\n\n\t\t//Set X range and domain\n\t\tvar x = d3.scaleLinear()\n\t\t  .range([0, width])\n\t\t  .domain([0, maxValue]);\n\n\t\t//Set Y range and domain\n\t\tvar y = d3.scaleLinear()\n\t\t  .range([height, 0])\n\t\t  .domain([0, maxValue]);\n\n\t\t//Prime axis\n\t\tvar xAxis = d3.axisBottom(x).ticks(10).tickSize(-height);\n\t\tvar yAxis = d3.axisLeft(y).ticks(10 * height / width).tickSize(-width);\n\n\t\t//Draw the shell\n\t\tvar svg = d3.select(\"#chart\").append(\"svg\")\n\t\t  .attr(\"width\", width + margin.left + margin.right)\n\t\t  .attr(\"height\", height + margin.top + margin.bottom)\n\t\t  .append(\"g\")\n\t\t  .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\t//Draw the axis\n\t\tsvg.append(\"g\")\n\t\t  .attr(\"class\", \"x axis \")\n\t\t  .attr('id', \"axis--x\")\n\t\t  .attr(\"transform\", \"translate(0,\" + height + \")\")\n\t\t  .call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t  .attr(\"class\", \"y axis\")\n\t\t  .attr('id', \"axis--y\")\n\t\t  .call(yAxis);\n\n\t\t//Draw the dots\n\t\tvar r = d3.scaleLinear()\n\t\t  //Range for dot sizes\n\t\t  .range([5, 20])\n\t\t  //Set the domain from data values\n\t\t  .domain([1, highestCount]);\n\n\t\tsvg.selectAll(\".dot\")\n\t\t  .data(data)\n\t\t  .enter().append(\"circle\")\n\t\t  .attr(\"class\", \"dot\")\n\t\t  .attr(\"r\", function(d) {\n\t\t    var thisCount = counts[d[0] + \",\" + d[1]];\n\t\t    return r(parseInt(thisCount));\n\t\t  })\n\t\t  .attr(\"cx\", function(d) {\n\t\t    return x(parseInt(d[0]));\n\t\t  })\n\t\t  .attr(\"cy\", function(d) {\n\t\t    return y(parseInt(d[1]));\n\t\t  })\n\t\t  .attr(\"opacity\", '.5')\n\t\t  .attr(\"class\", function(d) {\n\t\t    if (d[0] > d[1]) {\n\t\t      return \"cowboys-color\";\n\t\t    } else {\n\t\t      return \"opp-\" + weeks[index].toLowerCase();\n\t\t    }\n\t\t  })\n\t\t  .on(\"mouseenter\", function(d) {\n\t\t\t  var thisCount = counts[d[0] + \",\" + d[1]];\n\t\t\t  var xCoord = d3.mouse(this)[0];\n\t\t\t  var yCoord = d3.mouse(this)[1];\n\n\t\t\t  positionToolTip(xCoord, yCoord, halfpoint, margin);\n\n\t\t\t  d3.select(\".cowTipScore\").text(d[0]);\n\t\t\t  d3.select(\".oppTipScore\").text(d[1]);\n\t\t\t  d3.select(\".oppTipName\").text(weeks[index]);\n\t\t\t  d3.select(\".tipPredict\").text(thisCount);\n\t\t  })\n\t\t  .on(\"mouseleave\", function() {\n\t\t\t  d3.select(\"#tooltip\")\n\t\t\t  \t.classed(\"noShow\", true);\n\t\t  });\n\n\t\t//Set small dots on top of big ones\n\t\t  d3.selectAll(\"circle\")\n\t\t  .each(function(d) {\n\t\t    var rad =  parseInt(d3.select(this).attr(\"r\"));\n\t\t    if (rad < 10) {\n\t\t      this.parentElement.appendChild(this);\n\t\t    }\n\t\t});\n\n\t\t//Draw the diagonal\n\t\tsvg.append(\"line\")\n\t\t  .attr(\"x1\", height)\n\t\t  .attr(\"y1\", 0)\n\t\t  .attr(\"x2\", 0)\n\t\t  .attr(\"y2\", height)\n\t\t  .attr(\"stroke-width\", 2)\n\t\t  .attr(\"class\", \"diagonal\")\n\t\t  .attr(\"stroke\", \"#329ce8\");\n\n\t\t//Draw the labels\n\t\tsvg.append(\"text\")\n\t\t  .attr(\"text-anchor\", \"middle\")\n\t\t//   .attr(\"x\", height / 2)\n\t\t//   .attr(\"y\", -30)\n\t\t  .attr(\"x\", width / 2 * -1)\n\t\t  .attr(\"y\", -25)\n\t\t  .attr(\"transform\", \"rotate(-90)\")\n\t\t  .attr(\"class\", \"team-name\")\n\t\t  .text(weeks[index] + \"’ score\");\n\n\t\tsvg.append(\"text\")\n\t\t  .attr(\"text-anchor\", \"middle\")\n\t\t  .attr(\"y\", width + 30)\n\t\t  .attr(\"x\", width / 2)\n\t\t  .attr(\"class\", \"team-name\")\n\t\t  .text(\"Cowboys’ score\");\n\t}\n\n\tfunction positionToolTip(xCoord, yCoord, halfpoint, margin) {\n\n\t\t\ttooltipWidth = 180;\n\n\t\t\tif ($(window).width() <= 600) {\n\t\t\t\ttooltipWidth = 120;\n\t\t\t}\n\n\t\t\td3.select(\"#tooltip\")\n\t\t\t.classed(\"noShow\", false)\n\t\t\t.style(\"left\", function(d) {\n\t\t\t\tvar position = xCoord <= halfpoint ? xCoord + margin.left + 20 + \"px\" : xCoord + margin.left - (tooltipWidth + 20) + \"px\";\n\t\t\t\treturn position;\n\t\t\t})\n\t\t\t.style(\"top\", yCoord + \"px\");\n\t\t}\n\n\n\t//setting min height for chart\n\tvar chartWidth = $(\"#chartBlock\").width();\n\t$(\"#chartBlock\").css(\"min-height\", chartWidth);\n\n});\n"],"sourceRoot":"/source/"}